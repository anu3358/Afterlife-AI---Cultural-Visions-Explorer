# Afterlife AI - Cultural Visions Simulator
# A comprehensive implementation for simulating cultural visions of the afterlife

import json
import pandas as pd
import numpy as np
from typing import Dict, List, Tuple, Optional
import sqlite3
from datetime import datetime
import re
from collections import defaultdict
import logging

# NLP and ML imports
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity
from sklearn.cluster import KMeans
import nltk
from nltk.tokenize import sent_tokenize, word_tokenize
from nltk.corpus import stopwords
from nltk.stem import WordNetLemmatizer

# Web framework imports
from flask import Flask, render_template, request, jsonify, render_template_string
import requests

# Download required NLTK data
try:
    nltk.data.find('tokenizers/punkt')
except LookupError:
    nltk.download('punkt')

try:
    nltk.data.find('corpora/stopwords')
except LookupError:
    nltk.download('stopwords')

try:
    nltk.data.find('corpora/wordnet')
except LookupError:
    nltk.download('wordnet')

try:
    nltk.data.find('tokenizers/punkt_tab')
except LookupError:
    nltk.download('punkt_tab')


# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class AfterlifeDataset:
    """Handles creation and management of afterlife-related textual data"""

    def __init__(self, db_path: str = "afterlife_db.sqlite"):
        self.db_path = db_path
        self.lemmatizer = WordNetLemmatizer()
        self.stop_words = set(stopwords.words('english'))
        self.setup_database()
        self.create_sample_dataset()

    def setup_database(self):
        """Create database tables for storing cultural texts"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()

        # Create main texts table
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS cultural_texts (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                culture VARCHAR(100) NOT NULL,
                religion VARCHAR(100),
                text_content TEXT NOT NULL,
                source VARCHAR(200),
                afterlife_concepts TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')

        # Create concepts table
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS afterlife_concepts (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                concept VARCHAR(100) NOT NULL,
                culture VARCHAR(100) NOT NULL,
                description TEXT,
                frequency INTEGER DEFAULT 1
            )
        ''')

        conn.commit()
        conn.close()

    def create_sample_dataset(self):
        """Create sample dataset with various cultural perspectives"""

        sample_data = [
            # Christian perspectives
            {
                "culture": "Christian",
                "religion": "Christianity",
                "text_content": "And I heard a loud voice from the throne saying, 'Behold, the dwelling place of God is with man. He will dwell with them, and they will be his people, and God himself will be with them as their God. He will wipe away every tear from their eyes, and death shall be no more, neither shall there be mourning, nor crying, nor pain anymore, for the former things have passed away.' The righteous will inherit eternal life in paradise, where there is no suffering, only joy and peace in the presence of the divine.",
                "source": "Revelation 21:3-4 and Christian theology",
                "afterlife_concepts": "paradise, eternal life, divine presence, no suffering, joy, peace"
            },
            {
                "culture": "Christian",
                "religion": "Christianity",
                "text_content": "For the wages of sin is death, but the gift of God is eternal life in Christ Jesus our Lord. Those who accept salvation will be welcomed into heaven, a place of eternal worship and communion with God. The streets are paved with gold, and the gates are made of pearl. There is no night there, for the Lord God gives them light.",
                "source": "Romans 6:23 and Christian descriptions of heaven",
                "afterlife_concepts": "eternal life, heaven, salvation, divine communion, golden streets, pearl gates"
            },

            # Islamic perspectives
            {
                "culture": "Islamic",
                "religion": "Islam",
                "text_content": "And give good tidings to those who believe and do righteous deeds that they will have gardens beneath which rivers flow. Whenever they are provided with a provision of fruit therefrom, they will say, 'This is what we were provided with before.' The believers will enter Jannah, a paradise of infinite beauty, where they will recline on couches, enjoying pure drinks and the companionship of loved ones, forever young and happy.",
                "source": "Quran 2:25 and Islamic descriptions of Jannah",
                "afterlife_concepts": "Jannah, paradise, gardens, rivers, eternal youth, pure drinks, companionship"
            },
            {
                "culture": "Islamic",
                "religion": "Islam",
                "text_content": "The righteous will be in gardens and springs, wearing fine silk and brocade, facing each other. They will have whatever their souls desire and their eyes delight in. They will be served by immortal youths carrying vessels of silver and cups of crystal. The blessed will experience no fatigue, no sorrow, only eternal bliss in the mercy of Allah.",
                "source": "Quran 44:51-57 and Islamic paradise descriptions",
                "afterlife_concepts": "gardens, springs, silk, brocade, eternal bliss, immortal youths, silver vessels, crystal cups"
            },

            # Buddhist perspectives
            {
                "culture": "Buddhist",
                "religion": "Buddhism",
                "text_content": "Nirvana is the ultimate goal - the extinguishing of suffering, the end of the cycle of rebirth. It is not a place but a state of being, free from desire, attachment, and the illusion of self. The enlightened one achieves liberation from samsara, the endless wheel of death and rebirth. In this state, there is perfect peace, beyond concepts of existence and non-existence.",
                "source": "Buddhist teachings on Nirvana",
                "afterlife_concepts": "Nirvana, liberation, end of rebirth, no suffering, peace, extinguishing desire"
            },
            {
                "culture": "Buddhist",
                "religion": "Buddhism",
                "text_content": "Through the practice of the Eightfold Path, one can achieve enlightenment and break free from the cycle of karma. The Pure Land tradition speaks of Amitabha Buddha's western paradise, where beings can be reborn to continue their spiritual practice in perfect conditions, surrounded by lotus flowers and hearing the dharma from jeweled trees.",
                "source": "Pure Land Buddhist teachings",
                "afterlife_concepts": "Eightfold Path, enlightenment, karma, Pure Land, Amitabha Buddha, lotus flowers, jeweled trees"
            },

            # Hindu perspectives
            {
                "culture": "Hindu",
                "religion": "Hinduism",
                "text_content": "The soul, atman, is eternal and goes through multiple rebirths based on karma. Those who achieve moksha merge with Brahman, the ultimate reality, transcending individual existence. The Vedas describe various lokas or realms - from the heavenly realms of Indra to the ultimate state of oneness with the divine. The righteous may enjoy celestial pleasures in Svarga before their next birth.",
                "source": "Hindu scriptures - Vedas, Upanishads",
                "afterlife_concepts": "atman, karma, moksha, Brahman, lokas, Svarga, celestial pleasures, divine oneness"
            },

            # Ancient Egyptian perspectives
            {
                "culture": "Ancient Egyptian",
                "religion": "Egyptian",
                "text_content": "The deceased must journey through the Duat, the underworld, where they face trials and judgment. The heart is weighed against the feather of Ma'at, goddess of truth and justice. Those found worthy join Osiris in the Field of Reeds, an eternal paradise where they can enjoy all the pleasures of earthly life - abundant harvests, sailing on celestial waters, and reunion with loved ones.",
                "source": "Egyptian Book of the Dead",
                "afterlife_concepts": "Duat, underworld, judgment, Ma'at, heart weighing, Field of Reeds, Osiris, celestial waters"
            },

            # Norse perspectives
            {
                "culture": "Norse",
                "religion": "Norse",
                "text_content": "Warriors who die bravely in battle are chosen by the Valkyries to join the Einherjar in Valhalla, Odin's great hall. There they feast on mead and the meat of the boar Saehrimnir, which is reborn each day. They spend their days fighting and their evenings celebrating, preparing for the final battle of Ragnarök. Others may go to Hel's realm, which is not punishment but simply the dwelling place of the dead.",
                "source": "Norse Edda and mythology",
                "afterlife_concepts": "Valhalla, Valkyries, Einherjar, Odin, mead, Saehrimnir, Ragnarök, Hel"
            },

            # Ancient Greek perspectives
            {
                "culture": "Ancient Greek",
                "religion": "Greek",
                "text_content": "The souls of the dead cross the river Styx, ferried by Charon to the underworld ruled by Hades. The righteous few may reach the Elysian Fields, a paradise of eternal spring and happiness. Heroes might be taken to the Isles of the Blessed. Most souls, however, wander as shades in the asphodel meadows, retaining only faint memories of their earthly lives.",
                "source": "Greek mythology and literature",
                "afterlife_concepts": "Styx, Charon, Hades, Elysian Fields, Isles of the Blessed, shades, asphodel meadows"
            },

            # Modern secular/philosophical perspectives
            {
                "culture": "Secular",
                "religion": "Philosophical",
                "text_content": "Some philosophers propose that consciousness might continue in forms we cannot yet understand. Others suggest that our 'afterlife' exists in the memories of those who knew us and the impact we had on the world. The atoms that compose our bodies return to the universe, potentially forming new stars and planets. In this view, death is not an ending but a transformation into something greater.",
                "source": "Modern philosophical thought",
                "afterlife_concepts": "consciousness, memories, impact, atoms, universe, transformation, stars, planets"
            }
        ]

        # Check if data already exists
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        cursor.execute("SELECT COUNT(*) FROM cultural_texts")
        count = cursor.fetchone()[0]

        if count == 0:
            # Insert sample data
            for data in sample_data:
                cursor.execute('''
                    INSERT INTO cultural_texts (culture, religion, text_content, source, afterlife_concepts)
                    VALUES (?, ?, ?, ?, ?)
                ''', (data['culture'], data['religion'], data['text_content'],
                      data['source'], data['afterlife_concepts']))

                # Extract and store concepts
                concepts = [concept.strip() for concept in data['afterlife_concepts'].split(',')]
                for concept in concepts:
                    cursor.execute('''
                        INSERT OR IGNORE INTO afterlife_concepts (concept, culture, description)
                        VALUES (?, ?, ?)
                    ''', (concept, data['culture'], ''))

            conn.commit()
            logger.info(f"Created sample dataset with {len(sample_data)} entries")

        conn.close()

    def preprocess_text(self, text: str) -> str:
        """Preprocess text for NLP analysis"""
        # Convert to lowercase
        text = text.lower()

        # Remove special characters and digits
        text = re.sub(r'[^a-zA-Z\s]', '', text)

        # Tokenize
        tokens = word_tokenize(text)

        # Remove stopwords and lemmatize
        tokens = [self.lemmatizer.lemmatize(token) for token in tokens
                 if token not in self.stop_words and len(token) > 2]

        return ' '.join(tokens)

    def get_all_texts(self) -> List[Dict]:
        """Retrieve all texts from database"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()

        cursor.execute('''
            SELECT id, culture, religion, text_content, source, afterlife_concepts
            FROM cultural_texts
        ''')

        results = cursor.fetchall()
        conn.close()

        return [
            {
                'id': row[0],
                'culture': row[1],
                'religion': row[2],
                'text_content': row[3],
                'source': row[4],
                'afterlife_concepts': row[5]
            }
            for row in results
        ]

    def get_texts_by_culture(self, culture: str) -> List[Dict]:
        """Get texts for a specific culture"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()

        cursor.execute('''
            SELECT id, culture, religion, text_content, source, afterlife_concepts
            FROM cultural_texts WHERE culture = ?
        ''', (culture,))

        results = cursor.fetchall()
        conn.close()

        return [
            {
                'id': row[0],
                'culture': row[1],
                'religion': row[2],
                'text_content': row[3],
                'source': row[4],
                'afterlife_concepts': row[5]
            }
            for row in results
        ]

class AfterlifeAI:
    """Main AI class for generating and analyzing afterlife concepts"""

    def __init__(self, dataset: AfterlifeDataset):
        self.dataset = dataset
        self.vectorizer = TfidfVectorizer(max_features=1000, stop_words='english')
        self.texts_data = []
        self.vectors = None
        self.cultures = set()
        self.load_and_process_data()

    def load_and_process_data(self):
        """Load and process all textual data"""
        self.texts_data = self.dataset.get_all_texts()

        # Preprocess texts
        processed_texts = []
        for text_data in self.texts_data:
            processed_text = self.dataset.preprocess_text(text_data['text_content'])
            processed_texts.append(processed_text)
            self.cultures.add(text_data['culture'])

        # Create TF-IDF vectors
        if processed_texts:
            self.vectors = self.vectorizer.fit_transform(processed_texts)
            logger.info(f"Processed {len(processed_texts)} texts from {len(self.cultures)} cultures")

    def find_similar_concepts(self, query: str, culture: str = None, top_k: int = 3) -> List[Dict]:
        """Find similar afterlife concepts based on query"""
        processed_query = self.dataset.preprocess_text(query)
        query_vector = self.vectorizer.transform([processed_query])

        # Calculate similarities
        similarities = cosine_similarity(query_vector, self.vectors)[0]

        # Get top similar texts
        similar_indices = np.argsort(similarities)[::-1][:top_k * 2]  # Get more to filter by culture

        results = []
        for idx in similar_indices:
            text_data = self.texts_data[idx]

            # Filter by culture if specified
            if culture and text_data['culture'].lower() != culture.lower():
                continue

            if len(results) >= top_k:
                break

            results.append({
                'culture': text_data['culture'],
                'religion': text_data['religion'],
                'text': text_data['text_content'][:300] + "..." if len(text_data['text_content']) > 300 else text_data['text_content'],
                'source': text_data['source'],
                'similarity': similarities[idx],
                'concepts': text_data['afterlife_concepts']
            })

        return results

    def generate_afterlife_vision(self, culture: str, style: str = "descriptive") -> str:
        """Generate a vision of afterlife based on cultural texts"""
        culture_texts = self.dataset.get_texts_by_culture(culture)

        if not culture_texts:
            return f"No data available for {culture} culture."

        # Combine concepts from the culture
        all_concepts = []
        key_themes = []

        for text_data in culture_texts:
            concepts = text_data['afterlife_concepts'].split(',')
            all_concepts.extend([c.strip() for c in concepts])

            # Extract key themes
            text = text_data['text_content']
            if 'paradise' in text.lower() or 'heaven' in text.lower():
                key_themes.append("paradise")
            if 'peace' in text.lower() or 'bliss' in text.lower():
                key_themes.append("peace")
            if 'eternal' in text.lower():
                key_themes.append("eternal")

        # Create a generated vision
        vision = f"According to {culture} traditions, the afterlife is envisioned as "

        if culture.lower() == 'christian':
            vision += "a divine paradise where souls experience eternal peace in the presence of God. The righteous are welcomed into heaven, a realm of perfect joy where suffering no longer exists. Golden streets and pearl gates symbolize the magnificent beauty that awaits the faithful."

        elif culture.lower() == 'islamic':
            vision += "Jannah, a paradise of indescribable beauty with gardens beneath which rivers flow. The blessed recline on silk couches, enjoying pure drinks and eternal companionship. They remain forever young and happy, experiencing whatever their souls desire."

        elif culture.lower() == 'buddhist':
            vision += "the ultimate liberation from suffering through Nirvana - not a place, but a state of perfect peace where the cycle of rebirth ends. Some traditions also describe Pure Lands where beings can continue their spiritual practice in ideal conditions."

        elif culture.lower() == 'hindu':
            vision += "a complex system of realms where the eternal soul (atman) journeys based on karma. The ultimate goal is moksha - merger with Brahman, the universal consciousness. Righteous souls may enjoy celestial pleasures in Svarga before their next incarnation."

        elif culture.lower() == 'ancient egyptian':
            vision += "a journey through the underworld (Duat) where souls face judgment. Those found worthy join Osiris in the Field of Reeds, an eternal paradise reflecting the best of earthly life - abundant harvests, sailing on celestial waters, and reunion with loved ones."

        elif culture.lower() == 'norse':
            vision += "Valhalla for brave warriors, where they feast and fight in preparation for Ragnarök. Others journey to Hel's realm, a neutral dwelling place for the dead. The afterlife is characterized by honor, courage, and the continuation of one's earthly identity."

        elif culture.lower() == 'ancient greek':
            vision += "a journey across the river Styx to the underworld. The righteous few reach the Elysian Fields, a paradise of eternal spring. Heroes may be taken to the Isles of the Blessed, while most souls wander as shades in the asphodel meadows."

        else:
            # Generic description based on available concepts
            common_concepts = list(set(all_concepts))[:5]
            vision += f"characterized by {', '.join(common_concepts[:3])}. "
            if key_themes:
                vision += f"Common themes include {', '.join(set(key_themes))}."

        return vision

    def compare_cultures(self, culture1: str, culture2: str) -> Dict:
        """Compare afterlife concepts between two cultures"""
        texts1 = self.dataset.get_texts_by_culture(culture1)
        texts2 = self.dataset.get_texts_by_culture(culture2)

        if not texts1 or not texts2:
            return {"error": "One or both cultures not found in database"}

        # Extract concepts
        concepts1 = set()
        concepts2 = set()

        for text_data in texts1:
            concepts = [c.strip().lower() for c in text_data['afterlife_concepts'].split(',')]
            concepts1.update(concepts)

        for text_data in texts2:
            concepts = [c.strip().lower() for c in text_data['afterlife_concepts'].split(',')]
            concepts2.update(concepts)

        # Find similarities and differences
        common_concepts = concepts1.intersection(concepts2)
        unique_to_culture1 = concepts1 - concepts2
        unique_to_culture2 = concepts2 - concepts1

        return {
            'culture1': culture1,
            'culture2': culture2,
            'common_concepts': list(common_concepts),
            'unique_to_culture1': list(unique_to_culture1),
            'unique_to_culture2': list(unique_to_culture2),
            'similarity_score': len(common_concepts) / len(concepts1.union(concepts2)) if concepts1.union(concepts2) else 0
        }

    def get_available_cultures(self) -> List[str]:
        """Get list of available cultures in the database"""
        return sorted(list(self.cultures))

# Flask Web Application
app = Flask(__name__)
app.config['SECRET_KEY'] = 'your-secret-key-here'

# Initialize the AI system
dataset = AfterlifeDataset()
ai = AfterlifeAI(dataset)

@app.route('/')
def index():
    """Main page"""
    cultures = ai.get_available_cultures()
    return render_template_string(INDEX_TEMPLATE, cultures=cultures)

@app.route('/api/search', methods=['POST'])
def search_concepts():
    """Search for similar afterlife concepts"""
    data = request.json
    query = data.get('query', '')
    culture = data.get('culture', '')

    if not query:
        return jsonify({'error': 'Query is required'}), 400

    results = ai.find_similar_concepts(query, culture if culture else None)
    return jsonify({'results': results})

@app.route('/api/generate', methods=['POST'])
def generate_vision():
    """Generate afterlife vision for a culture"""
    data = request.json
    culture = data.get('culture', '')

    if not culture:
        return jsonify({'error': 'Culture is required'}), 400

    vision = ai.generate_afterlife_vision(culture)
    return jsonify({'vision': vision})

@app.route('/api/compare', methods=['POST'])
def compare_cultures():
    """Compare two cultures"""
    data = request.json
    culture1 = data.get('culture1', '')
    culture2 = data.get('culture2', '')

    if not culture1 or not culture2:
        return jsonify({'error': 'Both cultures are required'}), 400

    comparison = ai.compare_cultures(culture1, culture2)
    return jsonify(comparison)

@app.route('/api/cultures')
def get_cultures():
    """Get available cultures"""
    return jsonify({'cultures': ai.get_available_cultures()})

# HTML Templates
INDEX_TEMPLATE = '''
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Afterlife AI - Cultural Visions Explorer</title>
    <style>
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            margin: 0;
            padding: 20px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            color: #333;
        }
        .container {
            max-width: 1200px;
            margin: 0 auto;
            background: white;
            border-radius: 15px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.3);
            padding: 30px;
        }
        h1 {
            text-align: center;
            color: #4a5568;
            margin-bottom: 30px;
            font-size: 2.5em;
        }
        .section {
            margin-bottom: 40px;
            padding: 20px;
            border: 1px solid #e2e8f0;
            border-radius: 10px;
            background: #f8f9fa;
        }
        .section h2 {
            color: #2d3748;
            margin-bottom: 20px;
        }
        .form-group {
            margin-bottom: 15px;
        }
        label {
            display: block;
            margin-bottom: 5px;
            font-weight: bold;
            color: #4a5568;
        }
        input, select, textarea {
            width: 100%;
            padding: 10px;
            border: 1px solid #cbd5e0;
            border-radius: 5px;
            font-size: 16px;
            box-sizing: border-box;
        }
        button {
            background: #667eea;
            color: white;
            padding: 12px 24px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-size: 16px;
            transition: background 0.3s;
        }
        button:hover {
            background: #5a67d8;
        }
        .results {
            margin-top: 20px;
            padding: 20px;
            background: white;
            border-radius: 10px;
            border: 1px solid #e2e8f0;
        }
        .result-item {
            margin-bottom: 20px;
            padding: 15px;
            background: #f7fafc;
            border-left: 4px solid #667eea;
            border-radius: 5px;
        }
        .culture-tag {
            background: #667eea;
            color: white;
            padding: 3px 8px;
            border-radius: 3px;
            font-size: 12px;
            margin-right: 10px;
        }
        .similarity-score {
            background: #48bb78;
            color: white;
            padding: 3px 8px;
            border-radius: 3px;
            font-size: 12px;
        }
        .concept-list {
            display: flex;
            flex-wrap: wrap;
            gap: 8px;
            margin-top: 10px;
        }
        .concept-tag {
            background: #ed8936;
            color: white;
            padding: 4px 8px;
            border-radius: 3px;
            font-size: 12px;
        }
        .loading {
            text-align: center;
            padding: 20px;
            font-style: italic;
            color: #666;
        }
        .comparison-result {
            display: grid;
            grid-template-columns: 1fr 1fr 1fr;
            gap: 20px;
            margin-top: 20px;
        }
        .comparison-column {
            padding: 15px;
            background: #f7fafc;
            border-radius: 8px;
        }
        .comparison-column h4 {
            margin-top: 0;
            color: #2d3748;
        }
        .tabs {
            display: flex;
            margin-bottom: 20px;
        }
        .tab {
            padding: 10px 20px;
            background: #e2e8f0;
            border: none;
            cursor: pointer;
            margin-right: 2px;
            border-radius: 5px 5px 0 0;
        }
        .tab.active {
            background: #667eea;
            color: white;
        }
        .tab-content {
            display: none;
        }
        .tab-content.active {
            display: block;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>🌟 Afterlife AI - Cultural Visions Explorer</h1>

        <div class="tabs">
            <button class="tab active" onclick="showTab('search')">Search Concepts</button>
            <button class="tab" onclick="showTab('generate')">Generate Vision</button>
            <button class="tab" onclick="showTab('compare')">Compare Cultures</button>
        </div>

        <!-- Search Tab -->
        <div id="search" class="tab-content active">
            <div class="section">
                <h2>🔍 Search Afterlife Concepts</h2>
                <div class="form-group">
                    <label for="searchQuery">Search Query:</label>
                    <input type="text" id="searchQuery" placeholder="e.g., paradise, eternal life, judgment">
                </div>
                <div class="form-group">
                    <label for="searchCulture">Filter by Culture (optional):</label>
                    <select id="searchCulture">
                        <option value="">All Cultures</option>
                        {% for culture in cultures %}
                        <option value="{{ culture }}">{{ culture }}</option>
                        {% endfor %}
                    </select>
                </div>
                <button onclick="searchConcepts()">Search</button>
                <div id="searchResults" class="results" style="display: none;"></div>
            </div>
        </div>

        <!-- Generate Tab -->
        <div id="generate" class="tab-content">
            <div class="section">
                <h2>✨ Generate Afterlife Vision</h2>
                <div class="form-group">
                    <label for="generateCulture">Select Culture:</label>
                    <select id="generateCulture">
                        <option value="">Select a culture...</option>
                        {% for culture in cultures %}
                        <option value="{{ culture }}">{{ culture }}</option>
                        {% endfor %}
                    </select>
                </div>
                <button onclick="generateVision()">Generate Vision</button>
                <div id="generateResults" class="results" style="display: none;"></div>
            </div>
        </div>

        <!-- Compare Tab -->
        <div id="compare" class="tab-content">
            <div class="section">
                <h2>⚖️ Compare Cultural Perspectives</h2>
                <div class="form-group">
                    <label for="culture1">First Culture:</label>
                    <select id="culture1">
                        <option value="">Select first culture...</option>
                        {% for culture in cultures %}
                        <option value="{{ culture }}">{{ culture }}</option>
                        {% endfor %}
                    </select>
                </div>
                <div class="form-group">
                    <label for="culture2">Second Culture:</label>
                    <select id="culture2">
                        <option value="">Select second culture...</option>
                        {% for culture in cultures %}
                        <option value="{{ culture }}">{{ culture }}</option>
                        {% endfor %}
                    </select>
                </div>
                <button onclick="compareCultures()">Compare</button>
                <div id="compareResults" class="results" style="display: none;"></div>
            </div>
        </div>
    </div>

    <script>
        function showTab(tabName) {
            // Hide all tab contents
            const tabContents = document.querySelectorAll('.tab-content');
            tabContents.forEach(content => content.classList.remove('active'));

            // Remove active class from all tabs
            const tabs = document.querySelectorAll('.tab');
            tabs.forEach(tab => tab.classList.remove('active'));

            // Show selected tab content
            document.getElementById(tabName).classList.add('active');

            // Add active class to clicked tab
            event.target.classList.add('active');
        }

        async function searchConcepts() {
            const query = document.getElementById('searchQuery').value;
            const culture = document.getElementById('searchCulture').value;

            if (!query.trim()) {
                alert('Please enter a search query');
                return;
            }

            const resultsDiv = document.getElementById('searchResults');
            resultsDiv.style.display = 'block';
            resultsDiv.innerHTML = '<div class="loading">Searching...</div>';

            try {
                const response = await fetch('/api/search', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        query: query,
                        culture: culture
                    })
                });

                const data = await response.json();

                if (data.error) {
                    resultsDiv.innerHTML = `<div class="error">Error: ${data.error}</div>`;
                    return;
                }

                let html = '<h3>Search Results:</h3>';

                if (data.results.length === 0) {
                    html += '<p>No results found for your query.</p>';
                } else {
                    data.results.forEach(result => {
                        html += `
                            <div class="result-item">
                                <div>
                                    <span class="culture-tag">${result.culture}</span>
                                    <span class="similarity-score">Similarity: ${(result.similarity * 100).toFixed(1)}%</span>
                                </div>
                                <p><strong>Source:</strong> ${result.source}</p>
                                <p>${result.text}</p>
                                <div class="concept-list">
                                    ${result.concepts.split(',').map(concept =>
                                        `<span class="concept-tag">${concept.trim()}</span>`
                                    ).join('')}
                                </div>
                            </div>
                        `;
                    });
                }

                resultsDiv.innerHTML = html;
            } catch (error) {
                resultsDiv.innerHTML = `<div class="error">Error: ${error.message}</div>`;
            }
        }

        async function generateVision() {
            const culture = document.getElementById('generateCulture').value;

            if (!culture) {
                alert('Please select a culture');
                return;
            }

            const resultsDiv = document.getElementById('generateResults');
            resultsDiv.style.display = 'block';
            resultsDiv.innerHTML = '<div class="loading">Generating vision...</div>';

            try {
                const response = await fetch('/api/generate', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        culture: culture
                    })
                });

                const data = await response.json();

                if (data.error) {
                    resultsDiv.innerHTML = `<div class="error">Error: ${data.error}</div>`;
                    return;
                }

                resultsDiv.innerHTML = `
                    <h3>Afterlife Vision - ${culture} Perspective</h3>
                    <div class="result-item">
                        <p>${data.vision}</p>
                    </div>
                `;
            } catch (error) {
                resultsDiv.innerHTML = `<div class="error">Error: ${error.message}</div>`;
            }
        }

        async function compareCultures() {
            const culture1 = document.getElementById('culture1').value;
            const culture2 = document.getElementById('culture2').value;

            if (!culture1 || !culture2) {
                alert('Please select both cultures');
                return;
            }

            if (culture1 === culture2) {
                alert('Please select different cultures');
                return;
            }

            const resultsDiv = document.getElementById('compareResults');
            resultsDiv.style.display = 'block';
            resultsDiv.innerHTML = '<div class="loading">Comparing cultures...</div>';

            try {
                const response = await fetch('/api/compare', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        culture1: culture1,
                        culture2: culture2
                    })
                });

                const data = await response.json();

                if (data.error) {
                    resultsDiv.innerHTML = `<div class="error">Error: ${data.error}</div>`;
                    return;
                }

                resultsDiv.innerHTML = `
                    <h3>Cultural Comparison: ${data.culture1} vs ${data.culture2}</h3>
                    <p><strong>Similarity Score:</strong> ${(data.similarity_score * 100).toFixed(1)}%</p>

                    <div class="comparison-result">
                        <div class="comparison-column">
                            <h4>Common Concepts</h4>
                            <div class="concept-list">
                                ${data.common_concepts.map(concept =>
                                    `<span class="concept-tag">${concept}</span>`
                                ).join('')}
                            </div>
                        </div>

                        <div class="comparison-column">
                            <h4>Unique to ${data.culture1}</h4>
                            <div class="concept-list">
                                ${data.unique_to_culture1.map(concept =>
                                    `<span class="concept-tag">${concept}</span>`
                                ).join('')}
                            </div>
                        </div>

                        <div class="comparison-column">
                            <h4>Unique to ${data.culture2}</h4>
                            <div class="concept-list">
                                ${data.unique_to_culture2.map(concept =>
                                    `<span class="concept-tag">${concept}</span>`
                                ).join('')}
                            </div>
                        </div>
                    </div>
                `;
            } catch (error) {
                resultsDiv.innerHTML = `<div class="error">Error: ${error.message}</div>`;
            }
        }

        // Allow Enter key to trigger search
        document.getElementById('searchQuery').addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                searchConcepts();
            }
        });
    </script>
</body>
</html>
'''

if __name__ == '__main__':
    # Example usage and testing
    print("🌟 Afterlife AI System Initialized by ANURAG")
    print("=" * 50)

    # Test the system
    print("\n1. Available Cultures:")
    cultures = ai.get_available_cultures()
    for culture in cultures:
        print(f"   - {culture}")

    print("\n2. Sample Search - 'paradise':")
    results = ai.find_similar_concepts("paradise", top_k=3)
    for i, result in enumerate(results, 1):
        print(f"   {i}. {result['culture']}: {result['text'][:100]}...")

    print("\n3. Sample Vision Generation - Christian:")
    vision = ai.generate_afterlife_vision("Christian")
    print(f"   {vision}")

    print("\n4. Sample Comparison - Christian vs Islamic:")
    comparison = ai.compare_cultures("Christian", "Islamic")
    print(f"   Similarity: {comparison['similarity_score']:.2%}")
    print(f"   Common concepts: {comparison['common_concepts'][:3]}")

    print("\n5. Starting Flask Web Application...")
    print("   Visit http://localhost:5000 to use the web interface")
    print("   Press Ctrl+C to stop the server")

    # Run the Flask app
    app.run(debug=True, host='0.0.0.0', port=5000)
